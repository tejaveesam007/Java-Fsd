class Node {
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class SortedCircularLinkedList {
    Node head;

    void insert(int newData) {
        Node newNode = new Node(newData);

        if (head == null) {
            head = newNode;
            head.next = head;
        } else if (newData <= head.data) {
            newNode.next = head;
            head = newNode;
        } else {
            Node current = head;
            while (current.next != head && newData > current.next.data) {
                current = current.next;
            }

            newNode.next = current.next;
            current.next = newNode;
        }
    }

    void display() {
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }

        Node current = head;
        do {
            System.out.print(current.data + " ");
            current = current.next;
        } while (current != head);

        System.out.println();
    }
}

public class InsertInSortedCircularLinkedList {
    public static void main(String[] args) {
        SortedCircularLinkedList circularList = new SortedCircularLinkedList();

        circularList.insert(10);
        circularList.insert(20);
        circularList.insert(30);
        circularList.insert(40);

        System.out.println("Original sorted circular linked list:");
        circularList.display();

        circularList.insert(25);

        System.out.println("Sorted circular linked list after inserting 25:");
        circularList.display();
    }
}
